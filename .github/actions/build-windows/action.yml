name: build-windows
description: "A build action to Windows based plugin"
inputs:
  GOARCH:
    required: true
    description:  "Architecure for which binary should be build"

runs:
  using: composite
  steps:
    - name: "Checkout repository"
      uses: actions/checkout@v4
    
    - name: "Checkout wimlib repository"
      uses: actions/checkout@v4
      with:
        repository: ebiggers/wimlib
        path: './wimlib'
        submodules: true
    
    - name: "Setup MYSYS2 for wimlib build"
      uses: msys2/setup-msys2@v2
    
    - name: "Configure MYSYS2"
      shell: powershell
      run: msys2 -c 'pacman -Syu --noconfir --needed base-devel mingw-w64-i686-toolchain mingw-w64-x86_64-toolchain'
    
    - name: "Build wimlib binaries for windows x64"
      shell: powershell
      run: msys2 -c './wimlib/tools/windows-build.sh --install-prerequisites'
    
    - name: "Copy required files to related locations"
      shell: powershell
      run: |
        $ld = New-Item -Type Directory -Path ./.lib/devel
        gci -Recurse -Path ./wimlib -Include libwim.lib | cp -Destination $ld
        gci -Recurse -Path ./wimlib -Include wimlib.h | cp -Destination $ld
        $od = New-Item -Type Directory -Path ./out
        gci -Recurse -Path ./wimlib -Include libwim-15.dll | cp -Destination $od
    
    - name: "Setup Go runtime"
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: "Build plugin binary"
      shell: powershell
      run: |
        $env:GOARCH = "${{ inputs.GOARCH }}"
        go get .
        go build -x -o ./out/packer-plugin-wim_windows_${{ inputs.GOARCH }}.exe .

    - if: startsWith(github.ref, 'refs/tags/v') == true
      shell: powershell
      run: Add-Content -Value "artifactName=packer-plugin-wim_${{ github.ref_name }}_windows_${{ inputs.GOARCH }}" -Path "$env:GITHUB_ENV"

    - if: startsWith(github.ref, 'refs/tags/v') != true
      shell: powershell
      run: Add-Content -Value "artifactName=packer-plugin-wim_windows_${{ inputs.GOARCH }}" -Path "$env:GITHUB_ENV"

    - name: "Create Archive"
      shell: powershell
      run: |
        Compress-Archive -Path ./out/* -DestinationPath ./out/${{ env.artifactName }}.zip -CompressionLevel Optimal
        Remove-item -Path ./out/* -Recurse -Exclude *.zip
    
    - name: "Upload the archive"
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.artifactName }}
        path: ./out/*
        retention-days: 15
